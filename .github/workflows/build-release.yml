name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            executable: docker_pull
            build_type: standard
          - os: ubuntu-latest
            platform: linux
            arch: x64
            executable: docker_pull_mini
            build_type: optimized
          - os: windows-latest
            platform: windows
            arch: x64
            executable: docker_pull.exe
            build_type: standard
          - os: windows-latest
            platform: windows
            arch: x64
            executable: docker_pull_mini.exe
            build_type: optimized
          - os: macos-13
            platform: macos
            arch: x64
            executable: docker_pull
            build_type: standard
          - os: macos-13
            platform: macos
            arch: x64
            executable: docker_pull_mini
            build_type: optimized
          - os: macos-14
            platform: macos
            arch: arm64
            executable: docker_pull
            build_type: standard
          - os: macos-14
            platform: macos
            arch: arm64
            executable: docker_pull_mini
            build_type: optimized

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install UPX (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl
    
    - name: Install UPX (macOS)
      if: matrix.platform == 'macos'
      run: |
        brew install upx
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ "${{ matrix.build_type }}" = "optimized" ]; then
          pip install -r requirements_minimal.txt
        else
          pip install -r requirements.txt
        fi
        pip install pyinstaller Pillow
    
    - name: Setup cross-platform icons
      run: |
        python setup_icons.py
    
    - name: Build with PyInstaller (Linux/macOS - Standard)
      if: matrix.platform != 'windows' && matrix.build_type == 'standard'
      run: |
        pyinstaller docker_pull_platform.spec
        mv dist/docker_pull dist/docker_pull_${{ matrix.platform }}_${{ matrix.arch }}
    
    - name: Build with PyInstaller (Linux/macOS - Optimized)
      if: matrix.platform != 'windows' && matrix.build_type == 'optimized'
      run: |
        pyinstaller docker_pull_ultra_optimized_platform.spec
        mv dist/docker_pull_mini dist/docker_pull_${{ matrix.platform }}_${{ matrix.arch }}_mini
    
    - name: Build with PyInstaller (Windows - Standard)
      if: matrix.platform == 'windows' && matrix.build_type == 'standard'
      run: |
        pyinstaller docker_pull_platform.spec
        move dist\docker_pull.exe dist\docker_pull_${{ matrix.platform }}_${{ matrix.arch }}.exe
    
    - name: Build with PyInstaller (Windows - Optimized)
      if: matrix.platform == 'windows' && matrix.build_type == 'optimized'
      run: |
        pyinstaller docker_pull_ultra_optimized_platform.spec
        move dist\docker_pull_mini.exe dist\docker_pull_${{ matrix.platform }}_${{ matrix.arch }}_mini.exe
    
    - name: Create archive (Linux/macOS - Standard)
      if: matrix.platform != 'windows' && matrix.build_type == 'standard'
      run: |
        cd dist
        tar -czf docker_pull_${{ matrix.platform }}_${{ matrix.arch }}.tar.gz docker_pull_${{ matrix.platform }}_${{ matrix.arch }}
    
    - name: Create archive (Linux/macOS - Optimized)
      if: matrix.platform != 'windows' && matrix.build_type == 'optimized'
      run: |
        cd dist
        tar -czf docker_pull_${{ matrix.platform }}_${{ matrix.arch }}_mini.tar.gz docker_pull_${{ matrix.platform }}_${{ matrix.arch }}_mini
    
    - name: Create archive (Windows - Standard)
      if: matrix.platform == 'windows' && matrix.build_type == 'standard'
      run: |
        cd dist
        7z a docker_pull_${{ matrix.platform }}_${{ matrix.arch }}.zip docker_pull_${{ matrix.platform }}_${{ matrix.arch }}.exe
    
    - name: Create archive (Windows - Optimized)
      if: matrix.platform == 'windows' && matrix.build_type == 'optimized'
      run: |
        cd dist
        7z a docker_pull_${{ matrix.platform }}_${{ matrix.arch }}_mini.zip docker_pull_${{ matrix.platform }}_${{ matrix.arch }}_mini.exe
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker_pull_${{ matrix.platform }}_${{ matrix.arch }}_${{ matrix.build_type }}
        path: |
          dist/*.tar.gz
          dist/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: List artifacts
      run: find artifacts -type f -name "*.tar.gz" -o -name "*.zip"
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/**/*.tar.gz
          artifacts/**/*.zip
        generate_release_notes: true
        draft: false
        prerelease: false
        fail_on_unmatched_files: false